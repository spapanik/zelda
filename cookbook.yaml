$globals:
  shell: bash
  version: "6.0"
  vars:
    DJANGO_SETTINGS_MODULE: zelda.settings
    runner: poetry run
    env_vars: DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
    admin: ${env_vars} ${runner} django-admin
    PGDATABASE: zelda
    key_file: .ssl/keys/localhost.key
    cert_file: .ssl/certs/localhost.crt
    key_file_option: --ssl-keyfile ${key_file}
    cert_file_option: --ssl-certfile ${cert_file}
    reload: --reload --reload-include "zelda.yml"
    worker_options: ${reload} --lifespan off
    worker_class: zelda.lib.workers.UvicornWorker
    webserver_host: 0.0.0.0
    webserver_port: "8000"
    shell_plus_extra: --quiet-load
    poetry_sync: --sync
    input: --no-input

update:
  alias: install

format:
  phony: true
  requires:
    - install_py
  commands:
    - "${runner} ruff check --fix-only ."
    - "${runner} black ."

lint:
  phony: true
  requires:
    - lint_py
  commands:
    - $(pwd)/enforce_eol.py

install:
  phony: true
  keep_ts: true
  requires:
    - install_py
    - migrations

runserver:
  phony: true
  requires:
    - install
  commands:
    - >-
      ${env_vars} ${runner}
      uvicorn
      ${key_file_option}
      ${cert_file_option}
      --host ${webserver_host}
      --port ${webserver_port}
      ${worker_options}
      zelda.asgi:application

shell:
  phony: true
  requires:
    - install
  commands:
    - "${admin} shell_plus ${shell_plus_extra}"

install_py:
  phony: true
  keep_ts: true
  requires:
    - poetry.lock
  commands:
    - "poetry install ${poetry_sync} ${poetry_extra}"

lint_py:
  phony: true
  requires:
    - install_py
  commands:
    - "${runner} poetry check --lock"
    - "${runner} ruff check ."
    - "${runner} black --check ."
    - "${runner} mypy ."
    - "${admin} checkmigrations"
    - "${admin} check"

tests:
  phony: true
  requires:
    - install
  commands:
    - "${env_vars} ${runner} pytest ${pytest_args} ${pytest_path} ${.extra}"

poetry.lock:
  update: true
  requires:
    - pyproject.toml
  commands:
    - poetry lock

db:
  phony: true
  keep_ts: true
  exists_only: true
  existence_command: '[ $(psql -d ${db_base} -tAXc "${db_exists}") = "t" ]'
  commands:
    - "createdb ${PGDATABASE}"
  vars:
    db_exists: "SELECT EXISTS (SELECT 1 FROM pg_database WHERE datname = '${PGDATABASE}')"
    db_base: template1

migrations:
  phony: true
  keep_ts: true
  requires:
    - install_py
    - db
    - migrations.lock
  commands:
    - "${admin} migrate ${input}"
